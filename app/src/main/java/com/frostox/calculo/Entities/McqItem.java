package com.frostox.calculo.Entities;

import com.frostox.calculo.dao.DaoSession;
import com.frostox.calculo.dao.McqDao;
import com.frostox.calculo.dao.McqItemDao;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "MCQ_ITEM".
 */
public class McqItem {

    private Long id;
    /** Not-null value. */
    private String question;
    /** Not-null value. */
    private String optionA;
    /** Not-null value. */
    private String optionB;
    /** Not-null value. */
    private String optionC;
    /** Not-null value. */
    private String optionD;
    /** Not-null value. */
    private String answer;
    private Long mcqId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient McqItemDao myDao;

    private Mcq mcq;
    private Long mcq__resolvedKey;


    public McqItem() {
    }

    public McqItem(Long id) {
        this.id = id;
    }

    public McqItem(Long id, String question, String optionA, String optionB, String optionC, String optionD, String answer, Long mcqId) {
        this.id = id;
        this.question = question;
        this.optionA = optionA;
        this.optionB = optionB;
        this.optionC = optionC;
        this.optionD = optionD;
        this.answer = answer;
        this.mcqId = mcqId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMcqItemDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getQuestion() {
        return question;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setQuestion(String question) {
        this.question = question;
    }

    /** Not-null value. */
    public String getOptionA() {
        return optionA;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setOptionA(String optionA) {
        this.optionA = optionA;
    }

    /** Not-null value. */
    public String getOptionB() {
        return optionB;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setOptionB(String optionB) {
        this.optionB = optionB;
    }

    /** Not-null value. */
    public String getOptionC() {
        return optionC;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setOptionC(String optionC) {
        this.optionC = optionC;
    }

    /** Not-null value. */
    public String getOptionD() {
        return optionD;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setOptionD(String optionD) {
        this.optionD = optionD;
    }

    /** Not-null value. */
    public String getAnswer() {
        return answer;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setAnswer(String answer) {
        this.answer = answer;
    }

    public Long getMcqId() {
        return mcqId;
    }

    public void setMcqId(Long mcqId) {
        this.mcqId = mcqId;
    }

    /** To-one relationship, resolved on first access. */
    public Mcq getMcq() {
        Long __key = this.mcqId;
        if (mcq__resolvedKey == null || !mcq__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            McqDao targetDao = daoSession.getMcqDao();
            Mcq mcqNew = targetDao.load(__key);
            synchronized (this) {
                mcq = mcqNew;
            	mcq__resolvedKey = __key;
            }
        }
        return mcq;
    }

    public void setMcq(Mcq mcq) {
        synchronized (this) {
            this.mcq = mcq;
            mcqId = mcq == null ? null : mcq.getId();
            mcq__resolvedKey = mcqId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

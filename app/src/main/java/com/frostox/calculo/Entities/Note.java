package com.frostox.calculo.Entities;

import com.frostox.calculo.dao.DaoSession;
import com.frostox.calculo.dao.NoteDao;
import com.frostox.calculo.dao.TopicDao;
import com.frostox.calculo.interfaces.EntityGetter;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "NOTE".
 */
public class Note implements EntityGetter{

    private Long id;
    /** Not-null value. */
    private String name;
    /** Not-null value. */
    private String file;
    private Long topicId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient NoteDao myDao;

    private Topic topic;
    private Long topic__resolvedKey;


    public Note() {
    }

    public Note(Long id) {
        this.id = id;
    }

    public Note(Long id, String name, String file, Long topicId) {
        this.id = id;
        this.name = name;
        this.file = file;
        this.topicId = topicId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getNoteDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    /** Not-null value. */
    public String getFile() {
        return file;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setFile(String file) {
        this.file = file;
    }

    public Long getTopicId() {
        return topicId;
    }

    public void setTopicId(Long topicId) {
        this.topicId = topicId;
    }

    /** To-one relationship, resolved on first access. */
    public Topic getTopic() {
        Long __key = this.topicId;
        if (topic__resolvedKey == null || !topic__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TopicDao targetDao = daoSession.getTopicDao();
            Topic topicNew = targetDao.load(__key);
            synchronized (this) {
                topic = topicNew;
            	topic__resolvedKey = __key;
            }
        }
        return topic;
    }

    public void setTopic(Topic topic) {
        synchronized (this) {
            this.topic = topic;
            topicId = topic == null ? null : topic.getId();
            topic__resolvedKey = topicId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
